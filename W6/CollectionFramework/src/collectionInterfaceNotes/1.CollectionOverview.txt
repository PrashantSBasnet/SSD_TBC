Data Structures are used to store, organize, manage and retrieve data.
Common Operation in Data Structures: 
1. Store 
2. Organize (storing data as per index)
3. Manage (Replace an element, remove an element)
4. Retrieve


 
Collection is an object that represents a group of objects.
->We use collection to hold or transfer a group of objects from one location to another
# In order to send objects across the network, the objects must be serializable. 
	(Serialization = converting objects into sequence of bytes that can be easily stored, transmitted, or reconstructed into an object at a later time)
# Therefore, every Collection (Classes or Interface) implements Serializable Interface and Cloneable Interface (by default)
	(Serializable Interface and Cloneable Interface do not have any methods. They act as a marker/signal only)
# Cloneable interface is to make a copy of the object and compare
	 Object.clone()



Java Collection Framework
- It provides an architecture to store and manipulate the group of objects

    It can be broken down into 3 sections:

	Interfaces: 
	Abstract types that define the methods available on a collection

	Implementations
	Classes providing logic that completes and satisfies methods defined on collection interfaces

	Algorithm
	Computations like searching and sorting that work with collection types

	--------------

	Benefits of Collection:
	Standard data structures within the programming language deliver tremendous benefits for Java Developers.

	Reduces Effort
	Developers are not required to build or learn custom data structures, saving valuable development time.
	
	Increases Quality
	Implementations are battle tested, giving developers instant access to high-performing and well-engineered data structures.
	
	Promotes Interoperability (work with different collection types using a consistent set of methods and interfaces)
	Unrelated code bases are collections in their APIs, which creates interoperability among them.
	
	------------------
	
	
	Array (basic and fundamental data structure)
	- fixed size
	- IndexOutOfBound Exception if we want to store more than the size of the array
	- Solution: Collection 
	
	
	

	Array 												Collection
	
-	Fixed in Size										Growable
	
-	Can hold only homogeneous type 						Can hold homogeneous or heterogeneous data
	
-	Memory point of view, we should not use             Recommended to use to Stop memory wastage as it grows on demand  
	'Arrays'
	
-	There are no underlying data structures 			In built data structures and algorithms
	
-	Can hold primitive type and object type both		can only hold object types
	
														eg. ArrayList, Stack, Queue, Map, Sets, etc.



