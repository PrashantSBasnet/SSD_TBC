Collection (I)
		-Set (I)
			--HashSet(C)				--Sorted Set(I)
				---Linked HashSet(C)			--Navigable Set(I)
													---Tree Set(C)	
Sorted Set 

# 6 more methods than Collection Interface methods
1. Object first()
2. Object last()
3. SortedSet headSet(Object o)
4. SortedSet tailSet(Object o)
5. SortedSet subSet(Objecto, Object p)
6. Comparator comparator()

#accepts only Homogeneous objects because sorting of same objects is only possible

------------------------------------------

NavigableSet Interface
1. Sub interface of SortedSet
2. Contains method related to Navigation functionality.
3. Both sortedSet and NavigableSet have a same implementation class as Tree

------------------------------------------

Tree Set(C)

All Implemented Interfaces: Serializable, Cloneable, Iterable<E>, Collection<E>, NavigableSet<E>, Set<E>, SortedSet<E>

-provides guaranteed log(n) time cost for the basic operations (add, remove and contains).
-TreeSet instance performs all element comparisons using its compareTo (or compare) method, so two elements that are 
 deemed equal by this method are, from the standpoint of the set, equal. The behavior of a set is well-defined even if its 
 ordering is inconsistent with equals; it just fails to obey the general contract of the Set interface.
-Not Synchronized


1. Only Homogeneous insertion
2. Comparisons based on Balanced Tree
3. Underlying Data Structure: Balanced Tree

In Balanced Tree, 
1. Duplicates not allowed
2. Insertion order not preserved
3.								 First element you insert is always root,
  -- value < root value 																--value>root value
4. Null value accepted only when TreeSet is empty. If you try adding value after null, NullPointerException as Tree set
   adds value in sorting order.
   
#5.Any Object stored in TreeSet must implement Comparable Interface
