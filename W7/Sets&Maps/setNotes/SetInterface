Set Interface

Collection (I)
		-Set (I)
			--HashSet(C)				--Sorted Set(I)
				---Linked HashSet(C)			--Navigable Set(I)
													---Tree Set(C)		
			
Characteristics:
1. No duplicates
2. Insertion Order is not preserved
3. Accepts heterogeneous objects
4. All methods in Sets Interface are from Collection Interfaces


------------------------------
HashSet

1. Very suitable for Searching operation (Google uses the same)
2. Insertion order is not preserved


Underlying Data Structure: HashTable
				HashTable 	 (size =x)			
Object --->		HashCode	 (code value =y)
			         		 Now, index= y%x

LoadFactor Concept 
default value= 0.75 
This mean, when 75% of space gets occupied, new HashSet is created with size = (current size *2)

Default capacity of HashSet = 16

---------------------------------


LinkedHashSet (sub class of HashSet)

#1. Insertion order is preserved

Underlying Data Structure: combination of Linked List and Hash table.


---------------------------------------



Sorted Set 

# 6 more methods than Collection Interface methods
1. Object first()
2. Object last()
3. SortedSet headSet(Object o)
4. SortedSet tailSet(Object o)
5. SortedSet subSet(Objecto, Object p)
6. Comparator comparator()

#accepts only Homogeneous objects because sorting of same objects is only possible


------------------------------------------

NavigableSet Interface
1. Sub interface of SortedSet
2. Contains method related to Navigation functionality.
3. Both sortedSet and NavigableSet have a same implementation class as Tree






			         		 